generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cinema {
  id           Int         @id @default(autoincrement())
  cinemaRegion String      @db.VarChar(10)
  cinemaState  String      @db.VarChar(10)
  cinemaName   String?     @db.VarChar(20)
  screening    Screening[]
  theater      Theater[]
}

model CurationMedia {
  id              Int     @id @default(autoincrement())
  title           String  @db.VarChar(100)
  image           String  @db.VarChar(400)
  description     String? @db.VarChar(400)
  screeningPeriod String  @db.VarChar(50)
  type            String
}

model Movie {
  id          Int         @id @unique @default(autoincrement())
  title       String      @db.VarChar(40)
  image       String      @db.VarChar(400)
  description String?     @db.VarChar(400)
  runningTime Int
  ageLimit    Int
  openingDate DateTime    @db.Date
  advanceRate Float?
  movieRating Float?
  rank        Int?
  screening   Screening[]
}

model Screening {
  id        Int         @id @default(autoincrement())
  time      String      @db.VarChar(20)
  date      DateTime    @db.Date
  movieId   Int
  cinemaId  Int
  cinema    Cinema      @relation(fields: [cinemaId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "screening_cinema_id_fk")
  movie     Movie       @relation(fields: [movieId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "screening_movie_id_fk")
  ticketing Ticketing[]
}

model Theater {
  id       Int     @id @default(autoincrement())
  name     String? @db.VarChar(20)
  cinemaId Int
  cinema   Cinema  @relation(fields: [cinemaId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "theater_cinema_id_fk")
}

model Ticketing {
  id              Int       @id @default(autoincrement())
  reservationDate String
  amount          Int
  userId          Int
  screenId        Int
  screening       Screening @relation(fields: [screenId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ticketing_screening_id_fk")
  user            User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ticketing_user_id_fk")
}

model User {
  id          Int         @id @default(autoincrement())
  name        String
  userLoginId String      @unique(map: "user_userId_key") @db.VarChar(20)
  password    String      @db.VarChar(20)
  email       String?     @db.VarChar(50)
  phoneNumber String      @db.VarChar(50)
  birthday    DateTime    @db.Date
  ticketing   Ticketing[]
}
